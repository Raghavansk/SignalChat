[{"/Users/skr01/Reactapps/ConversationPane/chat/src/index.js":"1","/Users/skr01/Reactapps/ConversationPane/chat/src/App.js":"2","/Users/skr01/Reactapps/ConversationPane/chat/src/reportWebVitals.js":"3","/Users/skr01/Reactapps/ConversationPane/chat/src/RArticle.jsx":"4","/Users/skr01/Reactapps/ConversationPane/chat/src/RChat.jsx":"5"},{"size":500,"mtime":1607480477017,"results":"6","hashOfConfig":"7"},{"size":10041,"mtime":1610991649100,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1607480477019,"results":"9","hashOfConfig":"7"},{"size":686,"mtime":1607481070003,"results":"10","hashOfConfig":"11"},{"size":2015,"mtime":1610990300412,"results":"12","hashOfConfig":"7"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1gzgz3m",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ulffx2",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/skr01/Reactapps/ConversationPane/chat/src/index.js",[],["25","26"],"/Users/skr01/Reactapps/ConversationPane/chat/src/App.js",[],"/Users/skr01/Reactapps/ConversationPane/chat/src/reportWebVitals.js",[],"/Users/skr01/Reactapps/ConversationPane/chat/src/RArticle.jsx",[],"/Users/skr01/Reactapps/ConversationPane/chat/src/RChat.jsx",["27"],"import React, { useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {Chat,ChatHeader,ChatBody,ChatComposer,MessageList} from '@pega/cosmos-react-social';\nimport {  EmojiContext } from '@pega/cosmos-react-core';\nimport openSocket from 'socket.io-client';\nimport moment from 'moment';\n\nconst socket = openSocket('http://localhost:4000');\n\nconst initialState = {\n  msgList: []\n};\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'post':\n      return {\n        ...state,\n        msgList: [...state.msgList,action.payLoad]\n      }\n  }\n}\nconst RChat = (props) => {\n   const [state,dispatch] = useReducer(reducer,initialState);\n  const header = <ChatHeader  title='Signal chat' icon='chat-solid'/>;\n  const fetchGoogleSprite = () => {\n    return 'https://unpkg.com/emoji-datasource-google@5.0.1/img/google/sheets-clean/32.png';\n  };\n  const onSend = (message) => { \n      dispatch({type: 'post',payLoad: {id:'1', type: 'message', variant: 'sender', direction: 'out', timeStamp:moment(new Date().getTime()).format(\"LT\"), message: message}});\n      socket.emit('chat', {\n        id:'2', type: 'message', variant: 'receiver', direction: 'in', timeStamp:moment(new Date().getTime()).format(\"LT\"), message: message\n      });\n  }\n  useEffect(() => {\n    socket.on('chat',function(data){\n      dispatch({type: 'post',payLoad: {id:data.id, type: 'message', variant: 'receiver', direction: 'in', timeStamp:data.timeStamp, message: data.message}});\n    });\n  },[]);\n  const body = (\n    <ChatBody>\n      <MessageList messages={state.msgList}/>\n    </ChatBody>\n  );\n  const footer = <ChatComposer showEmoji placeholder=\"Please type your message\" onSend={(message) => onSend(message)}/>\n  return (\n    <EmojiContext.Provider value={{ set: 'google', spriteSrcResolver: fetchGoogleSprite }}>\n        <Chat header={header} body={body} footer={footer} className={props.className}/>   \n    </EmojiContext.Provider>\n  )\n}\n\nRChat.propTypes = {\n  msgList:PropTypes.array\n}\n\nexport default RChat;",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":14,"column":3,"nodeType":"34","messageId":"35","endLine":20,"endColumn":4},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]